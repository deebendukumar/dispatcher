version: '3'
#all port number should be exposed appending 9
services:

  mariadb:
    image: mariadb
    container_name: mariadb
    restart: unless-stopped
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./conf/mariadb/my.cnf:/etc/mysql/mariadb.conf.d/my.cnf:ro
    ports:
      - "9306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: RootDB
      MYSQL_USER: dispatcher
      MYSQL_PASSWORD: dispatcherrw
      MYSQL_DATABASE: dispatcher
      MYSQL_CHARSET: utf8
      MYSQL_COLLATION: utf8_general_ci
    networks:
      - portainer

  mongodb:
    image: mongo:4.0
    hostname: mongodb
    container_name: mongodb
    restart: unless-stopped
    ports:
      - 27017:27017
    volumes:
      - /data/mongodb:/data/db
    environment:
      MONGO_INITDB_DATABASE: wms
      MONGO_INITDB_ROOT_USERNAME: wms
      MONGO_INITDB_ROOT_PASSWORD: WmsRW
    networks:
      - portainer

  keycloak:
    depends_on:
      - mariadb
    image: quay.io/keycloak/keycloak:legacy
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    container_name: keycloak
    restart: unless-stopped
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=Pa55w0rd
      - DB_VENDOR=mariadb
      - DB_ADDR=mariadb
      - DB_DATABASE=keycloak
      - DB_USER=dispatcher
      - DB_PASSWORD=dispatcherrw
      - KEYCLOAK_LOGLEVEL=ERROR
      - PROXY_ADDRESS_FORWARDING=true
      # - DB_PORT: 9306
    ports:
      - "9080:8080"
    networks:
      - portainer

  nifi-registry:
    container_name: nifi-registry
    image: apache/nifi-registry:1.15.0
    restart: unless-stopped
    #given permission to run as root to access /opt/nifi-registry/nifi-registry-current/flow_storage
    user: root
    ports:
      - 18080:18080
    cpus: 1
    mem_limit: 4G
    mem_reservation: 4G
    environment:
      - LOG_LEVEL=INFO
      - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
      - NIFI_REGISTRY_FLOW_PROVIDER=file
      - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
    volumes:
      - /data/nifi/registry/database:/opt/nifi-registry/nifi-registry-current/database
      - /data/nifi/flow_storage/database:/opt/nifi-registry/nifi-registry-current/flow_storage
    networks:
      - portainer

  nifi:
    image: apache/nifi:1.15.0
    container_name: nifi
    user: root
    restart: unless-stopped
    ports:
      # HTTP
      - 18081:8080
      - 10000:10000/tcp
      - 18000:8000/tcp
      # Remote Input Socket
      #- 10000:10000/tcp
      # JVM Debugger
      #- 10001:8000/tcp
      # Cluster Node Protocol
      #- 11443:11443/tcp
    cpus: 2
    mem_limit: 8G
    mem_reservation: 8G
    volumes:
      - /data/nifi/home:/home/nifi
      - /data/nifi/certs:/opt/certs
      - /data/nifi/database_repository:/opt/nifi/nifi-current/database_repository
      - /data/nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - /data/nifi/content_repository:/opt/nifi/nifi-current/content_repository
      - /data/nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - /data/nifi/state:/opt/nifi/nifi-current/state
      - /data/nifi/logs:/opt/nifi/nifi-current/logs
    environment:
      SINGLE_USER_CREDENTIALS_USERNAME: admin
      SINGLE_USER_CREDENTIALS_PASSWORD: 9Ptk5ADcjBmdTn
      NIFI_SENSITIVE_PROPS_KEY: 9Ptk5ADcjBmdTn
      NIFI_JVM_HEAP_INIT: 4g
      NIFI_JVM_HEAP_MAX: 6g
      ########## Web ##########
      NIFI_WEB_HTTPS_HOST: '0.0.0.0'
      NIFI_WEB_HTTP_PORT: 8080

      ########## LDAP ##########
      # Url - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
      #LDAP_URL: 'ldap://ldap:389'

      # Manager DN - The DN of the manager that is used to bind to the LDAP server to search for users.
      #LDAP_MANAGER_DN: 'cn=admin,dc=example,dc=org'

      # Manager Password - The password of the manager that is used to bind to the LDAP server to search for users.
      #LDAP_MANAGER_PASSWORD: 'password'

      # User Search Base - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
      #LDAP_USER_SEARCH_BASE: 'dc=example,dc=org'

      # User Search Filter - Filter for searching for users against the User Search Base. (i.e. sAMAccountName={0}).
      # The user specified name is inserted into '{0}'.
      #LDAP_USER_SEARCH_FILTER: 'cn={0}'

      # Authentication Strategy - How the connection to the LDAP server is authenticated. Possible values are
      # ANONYMOUS, SIMPLE, LDAPS, or START_TLS.
      #LDAP_AUTHENTICATION_STRATEGY: 'SIMPLE'

      # Identity Strategy - Strategy to identify users. Possible values are USE_DN and USE_USERNAME. The default
      # functionality if this property is missing is USE_DN in order to retain backward compatibility. USE_DN will use
      # the full DN of the user entry if possible. USE_USERNAME will use the username the user logged in with.
      #LDAP_IDENTITY_STRATEGY: 'USE_DN'

      # TLS Keystore - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
      #LDAP_TLS_KEYSTORE: ''

      # TLS Keystore Password - Password for the Keystore that is used when connecting to LDAP using LDAPS or
      # START_TLS.
      #LDAP_TLS_KEYSTORE_PASSWORD: ''

      # TLS Keystore Type - Type of the Keystore that is used when connecting to LDAP using LDAPS or START_TLS (i.e.
      # JKS or PKCS12).
      #LDAP_TLS_KEYSTORE_TYPE: ''

      # TLS Truststore - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
      #LDAP_TLS_TRUSTSTORE: ''

      # TLS Truststore Password - Password for the Truststore that is used when connecting to LDAP using LDAPS or
      # START_TLS.
      #LDAP_TLS_TRUSTSTORE_PASSWORD: ''

      # TLS Truststore Type - Type of the Truststore that is used when connecting to LDAP using LDAPS or START_TLS
      # (i.e. JKS or PKCS12).
      #LDAP_TLS_TRUSTSTORE_TYPE: ''

      # TLS Protocol - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS, TLSv1.1, TLSv1.2,
      # etc).
      #LDAP_TLS_PROTOCOL: ''

      ########## Initial Identities ##########
      #INITIAL_ADMIN_IDENTITY: 'CN=Random User, O=Apache, OU=NiFi, C=US'
      #NODE_IDENTITY: ''

      ########## Cluster ##########
      # nifi.cluster.is.node
      #NIFI_CLUSTER_IS_NODE: 'false'
      # nifi.cluster.node.address
      #NIFI_CLUSTER_NODE_ADDRESS: ''
      # nifi.cluster.node.protocol.port
      #   Cluster Node Protocol Port
      #NIFI_CLUSTER_NODE_PROTOCOL_PORT: 11443
      # nifi.cluster.node.protocol.threads
      #NIFI_CLUSTER_NODE_PROTOCOL_THREADS: 10
      # nifi.cluster.node.protocol.max.threads
      #NIFI_CLUSTER_NODE_PROTOCOL_MAX_THREADS: 50
      # nifi.remote.input.host
      #   The hostname that clients can use to reach this host. This will be used by both RAW socket and HTTP.
      #NIFI_REMOTE_INPUT_HOST: ''
      # nifi.remote.input.socket.port
      #   Remote Input Socket Port - The port number that clients can use to reach this host. RAW socket Site-to-Site
      #   is enabled when this property is set.
      #NIFI_REMOTE_INPUT_SOCKET_PORT: 10000
      # nifi.zookeeper.connect.string
      #NIFI_ZK_CONNECT_STRING: '192.0.2.11:2181,192.0.2.12:2181,192.0.2.13:2181'
      # nifi.zookeeper.root.node
      #NIFI_ZK_ROOT_NODE: '/nifi'


      ########## Flow Election ##########
      # When a cluster first starts up, NiFi must determine which of the nodes have the "correct" version of the flow.
      # This is done by voting on the flows that each of the nodes has. When a node attempts to connect to a cluster,
      # it provides a copy of its local flow to the Cluster Coordinator. If no flow has yet been elected the "correct"
      # flow, the node's flow is compared to each of the other Nodes' flows. If another Node's flow matches this one, a
      # vote is cast for this flow. If no other Node has reported the same flow yet, this flow will be added to the
      # pool of possibly elected flows with one vote. After some amount of time has elapsed or some number of Nodes
      # have cast votes, a flow is elected to be the "correct" copy of the flow. All nodes that have incompatible flows
      # are then disconnected from the cluster while those with compatible flows inherit the cluster's flow. Election
      # is performed according to the "popular vote" with the caveat that the winner will never be an "empty flow"
      # unless all flows are empty. This allows an administrator to remove a node's flow.xml.gz file and restart the
      # node, knowing that the node's flow will not be voted to be the "correct" flow unless no other flow is found.
      # nifi.cluster.flow.election.max.wait.time
      #   The amount of time after which a flow is elected to be the "correct" copy of the flow.
      #NIFI_ELECTION_MAX_WAIT: '5 mins'
      # nifi.cluster.flow.election.max.candidates
      #   The number of nodes to cast votes after which a flow is elected to be the "correct" copy of the flow.
      #NIFI_ELECTION_MAX_CANDIDATES: ''

      ########## Variable Registry ##########
      # nifi.variable.registry.properties
      #   External properties files for variable registry. Supports a comma delimited list of file locations.
      #NIFI_VARIABLE_REGISTRY_PROPERTIES: ''
    networks:
      - portainer

  postgres:
    container_name: postgres
    image: postgres:14.1-alpine
    restart: always
    ports:
      - 5432:5432
    volumes:
      - /data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: odoo
      POSTGRES_PASSWORD: OdooRW
    networks:
      - portainer

  odoo:
    container_name: odoo
    image: odoo:18.0
    restart: always
    environment:
      HOST: postgres
      USER: odoo
      PASSWORD: OdooRW
    depends_on:
      - postgres
    ports:
      - 8069:8069
    volumes:
#      - /data/odoo/config:/etc/odoo
      - /data/odoo/extra-addons:/mnt/extra-addons
      - /data/odoo/data:/var/lib/odoo
    links:
      - postgres
    networks:
      - portainer

networks:
  portainer:
    name: portainer
    external: true